// <auto-generated />
using System;
using Keep_Note4.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Keep_Note2_EF.Migrations
{
    [DbContext(typeof(KeepDbContext))]
    [Migration("20230827164320_Updated User table Fluentapi")]
    partial class UpdatedUsertableFluentapi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Keep_Note2_EF.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CategoryCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CategoryCreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("usersUserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("usersUserId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReminderId")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReminderId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<string>("ReminderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RemniderCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("usersUserId")
                        .HasColumnType("int");

                    b.HasKey("ReminderId");

                    b.HasIndex("usersUserId");

                    b.ToTable("reminders");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Category", b =>
                {
                    b.HasOne("Keep_Note2_EF.Model.User", "users")
                        .WithMany()
                        .HasForeignKey("usersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Note", b =>
                {
                    b.HasOne("Keep_Note2_EF.Model.Category", "category")
                        .WithMany("notes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Keep_Note2_EF.Model.User", "user")
                        .WithMany("notes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Keep_Note2_EF.Model.Reminder", "reminder")
                        .WithMany("notes")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("reminder");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Reminder", b =>
                {
                    b.HasOne("Keep_Note2_EF.Model.User", "users")
                        .WithMany()
                        .HasForeignKey("usersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Category", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.Reminder", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("Keep_Note2_EF.Model.User", b =>
                {
                    b.Navigation("notes");
                });
#pragma warning restore 612, 618
        }
    }
}
